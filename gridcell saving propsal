
void saveGrid(const std::deque<std::deque<Cell>>& grid, const std::string& filename) {
    std::ofstream file(filename);
    if (!file.is_open()) {
        std::cerr << "Failed to open file for saving\n";
        return;
    }

    file << grid.size() << ' ' << grid[0].size() << '\n';
    for (const auto& row : grid) {
        for (const auto& cell : row) {
            file << static_cast<int>(cell.type) << ' '
                 << cell.input1 << ' '
                 << cell.input2 << ' '
                 << cell.state << '\n';
        }
    }
}




void loadGrid(std::deque<std::deque<Cell>>& grid, const std::string& filename) {
    std::ifstream file(filename);
    if (!file.is_open()) {
        std::cerr << "Failed to open file for loading\n";
        return;
    }

    size_t rows, cols;
    file >> rows >> cols;

    grid.clear();
    grid.resize(rows, std::deque<Cell>(cols));

    for (size_t i = 0; i < rows; ++i) {
        for (size_t j = 0; j < cols; ++j) {
            int typeInt;
            Cell cell;
            file >> typeInt >> cell.input1 >> cell.input2 >> cell.state;
            cell.type = static_cast<CellType>(typeInt);
            // Set position again, assuming consistent cell size
            cell.rect.setPosition({j * static_cast<float>(CELL_SIZE), i * static_cast<float>(CELL_SIZE)});
            grid[i][j] = cell;
        }
    }
}


/*
saveGrid(cells, "grid_state.txt");
...
loadGrid(cells, "grid_state.txt");
*/
